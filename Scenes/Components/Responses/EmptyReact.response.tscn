[gd_scene load_steps=13 format=2]

[ext_resource path="res://Scripts/AnimationTree.Animation.gd" type="Script" id=1]
[ext_resource path="res://Scripts/Prop.Action.gd" type="Script" id=2]

[sub_resource type="AnimationNodeAnimation" id=1]
animation = "DefaultAnim"
__meta__ = {

}

[sub_resource type="AnimationNodeAnimation" id=2]
animation = "EmptyReactResponse"
script = ExtResource( 1 )
__meta__ = {

}
chain = false
schema = ""
custom_script = ""

[sub_resource type="AnimationNodeAnimation" id=3]
animation = "DefaultAnim"
__meta__ = {

}

[sub_resource type="AnimationNodeStateMachineTransition" id=4]
auto_advance = true
__meta__ = {

}

[sub_resource type="AnimationNodeStateMachineTransition" id=5]
switch_mode = 2
auto_advance = true
__meta__ = {

}

[sub_resource type="AnimationNodeStateMachineTransition" id=6]
auto_advance = true
priority = 2
__meta__ = {

}

[sub_resource type="AnimationNodeStateMachine" id=7]
states/EmptyReact/node = SubResource( 1 )
states/EmptyReact/position = Vector2( 211, 146 )
states/EmptyReactResponse/node = SubResource( 2 )
states/EmptyReactResponse/position = Vector2( 525.951, 89 )
states/End/node = SubResource( 3 )
states/End/position = Vector2( 832.613, 146 )
transitions = [ "EmptyReact", "EmptyReactResponse", SubResource( 4 ), "EmptyReactResponse", "End", SubResource( 5 ), "EmptyReact", "End", SubResource( 6 ) ]
start_node = "EmptyReact"
end_node = "End"
graph_offset = Vector2( -24.4477, 21.2765 )
__meta__ = {

}

[sub_resource type="AnimationNodeStateMachinePlayback" id=8]
__meta__ = {

}

[sub_resource type="Animation" id=9]
length = 0.001
__meta__ = {

}

[sub_resource type="Animation" id=10]
length = 0.001
tracks/0/type = "method"
tracks/0/path = NodePath("..")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"values": [ {
"args": [ "get_node(BEHAVIOR).set_indexed(DATAINDEX, get_node(INVENTORY)._get_item_with_tags( get_node(RECEPTION).data.source.get_node(MAGAZINE).required_tags_dict.keys() ) )", {
"BEHAVIOR": "Behavior",
"DATAINDEX": "data:magazine",
"INVENTORY": "InventoryContainer",
"MAGAZINE": "Magazine",
"RECEPTION": "Reception"
} ],
"method": "_evaluate"
} ]
}
tracks/1/type = "method"
tracks/1/path = NodePath("../Behavior")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PackedFloat32Array( 0 ),
"transitions": PackedFloat32Array( 1 ),
"values": [ {
"args": [ "Reload" ],
"method": "_start_state"
} ]
}
__meta__ = {

}

[node name="EmptyReactResponse" type="AnimationTree"]
tree_root = SubResource( 7 )
anim_player = NodePath("AnimationPlayer")
parameters/playback = SubResource( 8 )
script = ExtResource( 2 )
__meta__ = {

}
start_node = "EmptyReact"
end_node = "End"

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/DefaultAnim = SubResource( 9 )
anims/EmptyReactResponse = SubResource( 10 )
__meta__ = {

}
